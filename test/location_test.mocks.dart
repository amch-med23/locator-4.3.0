// Mocks generated by Mockito 5.0.0 from annotations
// in location/test/location_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:location/location.dart' as _i3;
import 'package:location_platform_interface/location_platform_interface.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: avoid_as
// ignore_for_file: prefer_const_constructors
// ignore_for_file: always_specify_types

class _FakeLocationData extends _i1.Fake implements _i2.LocationData {}

/// A class which mocks [Location].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocation extends _i1.Mock implements _i3.Location {
  MockLocation() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.LocationData> get onLocationChanged =>
      (super.noSuchMethod(Invocation.getter(#onLocationChanged),
              returnValue: Stream<_i2.LocationData>.empty())
          as _i4.Stream<_i2.LocationData>);
  @override
  _i4.Future<bool> changeSettings(
          {_i2.LocationAccuracy? accuracy = _i2.LocationAccuracy.high,
          int? interval = 1000,
          double? distanceFilter = 0.0}) =>
      (super.noSuchMethod(
          Invocation.method(#changeSettings, [], {
            #accuracy: accuracy,
            #interval: interval,
            #distanceFilter: distanceFilter
          }),
          returnValue: Future.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> isBackgroundModeEnabled() =>
      (super.noSuchMethod(Invocation.method(#isBackgroundModeEnabled, []),
          returnValue: Future.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> enableBackgroundMode({bool? enable}) => (super.noSuchMethod(
      Invocation.method(#enableBackgroundMode, [], {#enable: enable}),
      returnValue: Future.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<_i2.LocationData> getLocation() =>
      (super.noSuchMethod(Invocation.method(#getLocation, []),
              returnValue: Future.value(_FakeLocationData()))
          as _i4.Future<_i2.LocationData>);
  @override
  _i4.Future<_i2.PermissionStatus> hasPermission() =>
      (super.noSuchMethod(Invocation.method(#hasPermission, []),
              returnValue: Future.value(_i2.PermissionStatus.granted))
          as _i4.Future<_i2.PermissionStatus>);
  @override
  _i4.Future<_i2.PermissionStatus> requestPermission() =>
      (super.noSuchMethod(Invocation.method(#requestPermission, []),
              returnValue: Future.value(_i2.PermissionStatus.granted))
          as _i4.Future<_i2.PermissionStatus>);
  @override
  _i4.Future<bool> serviceEnabled() =>
      (super.noSuchMethod(Invocation.method(#serviceEnabled, []),
          returnValue: Future.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> requestService() =>
      (super.noSuchMethod(Invocation.method(#requestService, []),
          returnValue: Future.value(false)) as _i4.Future<bool>);
}
